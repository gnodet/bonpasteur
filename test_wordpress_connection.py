#!/usr/bin/env python3
"""
Script de test pour v√©rifier la connexion √† WordPress
"""

import requests
import base64
import json

def test_wordpress_connection():
    """Test la connexion √† WordPress et affiche les informations"""
    
    # Configuration
    wp_url = "http://localhost:8080"
    
    print("üîç Test de connexion √† WordPress...")
    print(f"URL: {wp_url}")
    
    # Test 1: V√©rifier que WordPress r√©pond
    try:
        response = requests.get(wp_url, timeout=10)
        if response.status_code == 200:
            print("‚úÖ WordPress est accessible")
        else:
            print(f"‚ùå WordPress r√©pond avec le code: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Impossible d'acc√©der √† WordPress: {e}")
        return False
    
    # Test 2: V√©rifier l'API REST
    api_url = f"{wp_url}/wp-json/wp/v2"
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code == 200:
            print("‚úÖ API REST WordPress accessible")
        else:
            print(f"‚ùå API REST r√©pond avec le code: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur API REST: {e}")
    
    # Test 3: Lister les pages existantes (sans authentification)
    try:
        response = requests.get(f"{api_url}/pages", timeout=10)
        if response.status_code == 200:
            pages = response.json()
            print(f"‚úÖ {len(pages)} pages trouv√©es dans WordPress")
            if pages:
                print("üìÑ Pages existantes:")
                for page in pages[:5]:  # Afficher les 5 premi√®res
                    print(f"   - {page['title']['rendered']} (ID: {page['id']})")
                if len(pages) > 5:
                    print(f"   ... et {len(pages) - 5} autres")
        else:
            print(f"‚ùå Impossible de lister les pages: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des pages: {e}")
    
    # Test 4: V√©rifier les utilisateurs (n√©cessite authentification)
    print("\nüîê Test d'authentification...")
    print("Pour tester l'authentification, vous devez fournir vos identifiants WordPress.")
    
    username = input("Nom d'utilisateur WordPress (ou Entr√©e pour passer): ").strip()
    if username:
        password = input("Mot de passe WordPress: ").strip()
        
        if password:
            auth = base64.b64encode(f"{username}:{password}".encode()).decode()
            headers = {
                'Authorization': f'Basic {auth}',
                'Content-Type': 'application/json'
            }
            
            try:
                response = requests.get(f"{api_url}/users/me", headers=headers, timeout=10)
                if response.status_code == 200:
                    user_info = response.json()
                    print(f"‚úÖ Authentification r√©ussie pour: {user_info['name']}")
                    print(f"   R√¥les: {', '.join(user_info['roles'])}")
                    
                    # Test de cr√©ation d'une page de test
                    test_page_data = {
                        'title': 'Test Page - √Ä supprimer',
                        'content': '<p>Ceci est une page de test cr√©√©e automatiquement. Vous pouvez la supprimer.</p>',
                        'status': 'draft'  # Brouillon pour ne pas publier
                    }
                    
                    response = requests.post(f"{api_url}/pages", headers=headers, json=test_page_data, timeout=10)
                    if response.status_code == 201:
                        page_info = response.json()
                        print(f"‚úÖ Test de cr√©ation de page r√©ussi (ID: {page_info['id']})")
                        print("   La page de test a √©t√© cr√©√©e en brouillon")
                        
                        # Supprimer la page de test
                        delete_response = requests.delete(f"{api_url}/pages/{page_info['id']}", headers=headers, timeout=10)
                        if delete_response.status_code == 200:
                            print("‚úÖ Page de test supprim√©e avec succ√®s")
                        else:
                            print(f"‚ö†Ô∏è  Page de test cr√©√©e mais non supprim√©e (ID: {page_info['id']})")
                    else:
                        print(f"‚ùå √âchec de cr√©ation de page de test: {response.status_code}")
                        print(f"   R√©ponse: {response.text}")
                        
                elif response.status_code == 401:
                    print("‚ùå Identifiants incorrects")
                else:
                    print(f"‚ùå Erreur d'authentification: {response.status_code}")
                    print(f"   R√©ponse: {response.text}")
            except Exception as e:
                print(f"‚ùå Erreur lors du test d'authentification: {e}")
    
    print("\nüìã R√©sum√©:")
    print("1. Assurez-vous que WordPress est accessible")
    print("2. V√©rifiez que l'API REST est activ√©e")
    print("3. Utilisez un compte avec les droits d'√©dition de pages")
    print("4. Modifiez wordpress_config.py avec vos identifiants")

if __name__ == "__main__":
    test_wordpress_connection()
